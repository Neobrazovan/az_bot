from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

import os

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_ff_id = State()
    choosing_product = State()
    confirming_payment = State()

# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
PRODUCTS = {
    "310 + 31 –∞–ª–º–∞–∑–æ–≤ üî• –•–∏—Ç": 245,
    "100 + 10 –∞–ª–º–∞–∑–æ–≤ üíé": 76,
    "520 + 52 –∞–ª–º–∞–∑–æ–≤ üíé": 397,
    "1060 + 106 –∞–ª–º–∞–∑–æ–≤ üíé": 799,
    "2180 + 218 –∞–ª–º–∞–∑–æ–≤ üíé": 1599,
    "5600 + 560 –∞–ª–º–∞–∑–æ–≤ üíé": 3829
}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Free Fire ID:")
    await Form.waiting_for_ff_id.set()

# –ü–æ–ª—É—á–∞–µ–º FF ID
@dp.message_handler(state=Form.waiting_for_ff_id)
async def get_ff_id(message: types.Message, state: FSMContext):
    await state.update_data(ff_id=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for name in PRODUCTS:
        markup.add(KeyboardButton(name))
    await message.answer("üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∞–ª–º–∞–∑–æ–≤:", reply_markup=markup)
    await Form.choosing_product.set()

# –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=Form.choosing_product)
async def choose_product(message: types.Message, state: FSMContext):
    if message.text not in PRODUCTS:
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫.")
    
    product = message.text
    price = PRODUCTS[product]
    await state.update_data(product=product)

    await message.answer(
        f"üßæ –í—ã –≤—ã–±—Ä–∞–ª–∏: {product}\nüí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n8600 1234 5678 9012\n\n"
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await Form.confirming_payment.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.confirming_payment)
async def receive_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ff_id = user_data['ff_id']
    product = user_data['product']

    caption = (
        f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üë§ @{message.from_user.username or message.from_user.id}\n"
        f"üÜî Free Fire ID: {ff_id}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {product}\n"
        f"‚úÖ –ß–µ–∫:"
    )
    await bot.send_photo(chat_id=ADMIN_ID, photo=message.photo[-1].file_id, caption=caption)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
